import React, { useEffect } from 'react';
import { X, Copy, Download } from 'lucide-react';

const OutputModal = ({ isOpen, onClose, agent, output }) => {
  useEffect(() => {
    const handleEscape = e => {
      if (e.key === 'Escape') onClose();
    };
    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
      document.body.style.overflow = 'hidden';
    }
    return () => {
      document.removeEventListener('keydown', handleEscape);
      document.body.style.overflow = 'unset';
    };
  }, [isOpen, onClose]);

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(output || '');
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  const downloadOutput = () => {
    const blob = new Blob([output || ''], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${agent?.name?.toLowerCase().replace(/\s+/g, '-') || 'agent'}-output.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      <div className="absolute inset-0 bg-black/60 modal-backdrop" onClick={onClose} />
      <div className="relative bg-gray-800 rounded-xl shadow-2xl border border-gray-700 max-w-4xl w-full mx-4 max-h-[90vh] flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <div className="flex items-center space-x-3">
            <div className={`${agent?.bgColor || 'bg-blue-500'} p-2 rounded-lg`}>
              {agent?.icon && React.createElement(agent.icon, { className: 'w-5 h-5 text-white' })}
            </div>
            <div>
              <h2 className="text-xl font-semibold text-white">{agent?.name} Output</h2>
              <p className="text-sm text-gray-400">{agent?.description}</p>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button onClick={copyToClipboard} className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors" title="Copy to clipboard">
              <Copy className="w-4 h-4 text-gray-300" />
            </button>
            <button onClick={downloadOutput} className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors" title="Download output">
              <Download className="w-4 h-4 text-gray-300" />
            </button>
            <button onClick={onClose} className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors" title="Close modal">
              <X className="w-4 h-4 text-gray-300" />
            </button>
          </div>
        </div>

        <div className="flex-1 overflow-auto p-6">
          {output ? (
            <pre className="bg-gray-900 rounded-lg p-4 overflow-x-auto text-sm text-gray-100 whitespace-pre-wrap">
              {output}
            </pre>
          ) : (
            <div className="text-center text-gray-400 py-12">No output available yet</div>
          )}
        </div>

        <div className="border-t border-gray-700 p-4">
          <div className="flex items-center justify-between text-sm text-gray-400">
            <span>Generated by {agent?.name}</span>
            <span>{output ? `${output.length} characters` : '0 characters'}</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OutputModal;

